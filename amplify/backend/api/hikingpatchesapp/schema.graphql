# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

enum Difficulty {
  EASY
  MODERATE
  HARD
  EXTRA_HARD
  EXTRA_EXTRA_HARD
}

type Patch @model 
  @auth(rules: [
    { allow: public, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {
  id: ID!
  name: String!
  description: String
  howToGet: String
  imageUrl: String
  regions: [String]
  difficulty: Difficulty
  latitude: Float
  longitude: Float
  popularity: Int
  hasPeaks: Boolean
  userPatches: [UserPatch] @hasMany(indexName: "byPatch", fields: ["id"])  
  patchMountains: [PatchMountain] @hasMany
}

type UserPatch @model 
  @auth(rules: [
  { allow: public, operations: [read] },
  { allow: owner, operations: [read, create, update, delete] },
  ]) {
  id: ID!
  patchID: ID! @index(name: "byPatch")
  patch: Patch @belongsTo(fields: ["patchID"])
  userID: String!
  dateCompleted: AWSDate
  notes: String
  difficulty: Int
  imageUrl: String
  inProgress: Boolean
}

type PatchRequest @model
  @auth(rules: [
    { allow: public, provider: apiKey, operations: [create] }
    { allow: groups, groups: ["Admin"], operations: [read]}
  ]) {
  id: ID!
  email: String!
  description: String!
  createdAt: AWSDateTime
}

type Mountain @model
  @auth(rules: [
    { allow: public, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] }
  ]) {
  id: ID!
  name: String!
  elevation: Int
  latitude: Float
  longitude: Float
  city: String
  state: String
  patchMountains: [PatchMountain] @hasMany
  userMountains: [UserMountain] @hasMany(indexName: "byMountain", fields: ["id"])
}

type PatchMountain @model
  @auth(rules: [
    { allow: public, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] }
  ]) {
  id: ID!
  patch: Patch! @belongsTo
  mountain: Mountain! @belongsTo
}

type UserMountain @model
  @auth(rules: [
    { allow: owner, operations: [create, update, delete, read] },
    { allow: groups, groups: ["Admin"], operations: [read, delete, update] }
  ]){
  id: ID!
  userID: ID! @index(name: "byUser", queryField: "userMountainsByUser") 
  mountainID: ID! @index(name: "byMountain", queryField: "userMountainsByMountain")
  dateClimbed: AWSDate!
  notes: String

  mountain: Mountain @belongsTo(fields: ["mountainID"])
}

