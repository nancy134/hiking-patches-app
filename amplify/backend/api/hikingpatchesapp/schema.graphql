# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
#input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

enum Difficulty {
  EASY
  MODERATE
  HARD
  EXTRA_HARD
  EXTRA_EXTRA_HARD
}

type Patch @model 
  @auth(rules: [
    { allow: public, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, create, update, delete]}
  ]) {
  id: ID!
  name: String!
  description: String
  howToGet: String
  imageUrl: String
  regions: [String]
  difficulty: Difficulty
  latitude: Float
  longitude: Float
  popularity: Int
  hasPeaks: Boolean
  hasTrails: Boolean
  completionRule: AWSJSON
  userPatches: [UserPatch] @hasMany(indexName: "byPatch", fields: ["id"])  
  patchMountains: [PatchMountain] @hasMany(indexName: "byPatch", fields: ["id"])
  patchTrails: [PatchTrail] @hasMany(indexName: "byPatch", fields: ["id"])
}

type UserPatch @model 
  @auth(rules: [
  { allow: public, operations: [read] },
  { allow: owner, operations: [read, create, update, delete] },
  ]) 
{
  id: ID!

  # Single-field index to list by patch
  patchID: ID!
    @index(name: "byPatch", queryField: "userPatchesByPatch")

  patch: Patch @belongsTo(fields: ["patchID"])

  # Composite index: (userID, patchID) -> userPatchesByUserByPatch
  userID: String!
    @index(
      name: "byUserByPatch",
      sortKeyFields: ["patchID"],
      queryField: "userPatchesByUserByPatch"
    )

  dateCompleted: AWSDate
  notes: String
  difficulty: Int
  imageUrl: String
  inProgress: Boolean
  wishlisted: Boolean
}

type PatchRequest @model
  @auth(rules: [
    { allow: public, provider: apiKey, operations: [create] }
    { allow: groups, groups: ["Admin"], operations: [read]}
  ]) {
  id: ID!
  email: String!
  description: String!
  createdAt: AWSDateTime
}

type Mountain @model
  @auth(rules: [
    { allow: public, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] }
  ]) {
  id: ID!
  name: String!
  elevation: Int
  latitude: Float
  longitude: Float
  city: String
  state: String
  patchMountains: [PatchMountain] @hasMany(indexName: "byMountain", fields: ["id"])
  userMountains: [UserMountain] @hasMany(indexName: "byMountain", fields: ["id"])
}

type PatchMountain @model
  @auth(rules: [
    { allow: public, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] }
  ]) 
{
  id: ID!
  # Explicit FKs so we can index them
  patchPatchMountainsId: ID @index(name: "byPatch", queryField: "patchMountainsByPatch")
  mountainPatchMountainsId: ID @index(name: "byMountain", queryField: "patchMountainsByMountain")

  # BelongsTo uses the explicit fields above
  patch: Patch! @belongsTo(fields: ["patchPatchMountainsId"])
  mountain: Mountain! @belongsTo(fields: ["mountainPatchMountainsId"])

  delisted: Boolean
}

type UserMountain @model
  @auth(rules: [
    { allow: owner, operations: [create, update, delete, read] },
    { allow: groups, groups: ["Admin"], operations: [read, delete, update] }
    { allow: private, provider: iam, operations: [read] }
  ])
{
  id: ID!

  userID: ID! 
    @index(name: "byUser", queryField: "userMountainsByUser")
    @index(name: "byUserByMountain", sortKeyFields: ["mountainID"], queryField: "userMountainsByUserByMountain")
    @index(name: "byUserByDate", sortKeyFields: ["dateClimbed"], queryField: "userMountainsByUserByDate")

  mountainID: ID! @index(name: "byMountain", queryField: "userMountainsByMountain")

  dateClimbed: AWSDate!
  notes: String

  mountain: Mountain @belongsTo(fields: ["mountainID"])
}

type PatchProgress 
  @aws_cognito_user_pools   # allow signed-in users to read this type
  @aws_iam                  # optional: let your Lambda (IAM) read it too
{
  patchId: ID!
  userId: ID!
  completed: Int!  # how many patch mountains the user has at least 1 ascent for
  denom: Int!      # denominator after applying rule (e.g., exclude delisted, or any N)
  percent: Int!    # 0..100, rounded
  note: String
}

type Query {
  getPatchProgressSummary(patchId: ID!, userId: ID!): PatchProgress
    @function(name: "getPatchProgress-${env}")
    @aws_cognito_user_pools   # allow signed-in users

  listPatchProgress(patchIds: [ID!]!, userId: ID!): [PatchProgress!]!
    @function(name: "getPatchProgress-${env}")
    @aws_cognito_user_pools
}

type Trail @model
  @auth(rules: [
    { allow: public, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] }
  ]) {
  id: ID!
  name: String!
  description: String
  lengthMiles: Float!

  patchTrails: [PatchTrail] @hasMany(indexName: "byTrail", fields: ["id"])
  userTrails: [UserTrail]   @hasMany(indexName: "byTrail", fields: ["id"])
}

type PatchTrail @model
  @auth(rules: [
    { allow: public, operations: [read] },
    { allow: groups, groups: ["Admin"], operations: [read, create, update, delete] }
  ]) {
  id: ID!

  patchPatchTrailsId: ID @index(name: "byPatch", queryField: "patchTrailsByPatch")
  trailPatchTrailsId: ID @index(name: "byTrail", queryField: "patchTrailsByTrail")

  patch: Patch! @belongsTo(fields: ["patchPatchTrailsId"])
  trail: Trail! @belongsTo(fields: ["trailPatchTrailsId"])

  requiredMiles: Float
}

type UserTrail
  @model
  @auth(rules: [
    { allow: owner, ownerField: "userID", operations: [create, update, delete, read] },
    { allow: groups, groups: ["Admin"], operations: [read, delete, update] },
    { allow: private, provider: iam, operations: [read] }
  ]) {
  # âœ… Composite PK: one record per (user, trail)
  userID: ID!
    @primaryKey(sortKeyFields: ["trailID"])                                # <-- primary key on FIELD (v2)
    @index(name: "byUser", queryField: "userTrailsByUser")                 # list all trails for a user
    @index(name: "byUserByDateCompleted", sortKeyFields: ["dateCompleted"], queryField: "userTrailsByUserByDateCompleted")

  trailID: ID!
    @index(name: "byTrail", queryField: "userTrailsByTrail")               # list all users for a trail

  dateCompleted: AWSDate
  milesRemaining: Float
  notes: String

  trail: Trail @belongsTo(fields: ["trailID"])
}


